// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED") // Doğrudan bağlantı için
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id           String        @id @default(cuid())
  name         String
  email        String?
  phone        String       @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // dakika cinsinden
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Doctor {
  id          String       @id @default(cuid())
  name        String
  title       String
  specialties String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  appointments Appointment[]
}

model Appointment {
  id        String   @id @default(cuid())
  date      DateTime
  status    AppointmentStatus @default(PENDING)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  doctor     Doctor   @relation(fields: [doctorId], references: [id])
  doctorId   String
}

model AnalyticsConfig {
  id                  Int      @id @default(1)
  googleAnalyticsId   String?
  googleTagManagerId  String?
  metaPixelId        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Script {
  id           String   @id @default(cuid())
  type         String
  scriptId     String?
  customScript String?  @db.Text
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  ADMIN
  SUPER_ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
